<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="  
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- ====================针对c3p0的连接池配置项============================== -->
	<!-- destroy-method="close" 当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!--数据源驱动  -->
		<property name="driverClass"   value="${db_driver}" />
		<!--数据源jdbc地址  -->
		<property name="jdbcUrl" value="${db_url}"/>
		<!--数据源用户名称 -->
		<property name="user" value="${db_user}"/>
		<!--数据源用户名密码 -->
		<property name="password" value="${db_passwd}"/>
		
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${db_minpoolsize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${db_maxpoolsize}" />
		<!--  初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 -->
		<property name="initialPoolSize" value="${db_initialpoolsize}" />
		
		<!--最大空闲时间，120秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->   
		<property name="maxIdleTime" value="${db_maxidleTime}"/>
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，
		       超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
        <property name="checkoutTimeout" value="${db_checkoutTimeout}"/>  
		
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->   
        <property name="acquireIncrement" value="${db_acquireIncrement}"/>  
        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->   
        <property name="acquireRetryAttempts" value="${db_acquireRetryAttempts}"/>  
        <!--重新尝试的时间间隔，默认为：1000毫秒-->   
        <property name="acquireRetryDelay" value="${db_acquireRetryDelay}" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${db_idleConnectionTestPeriod}" />
        
        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->   
       <property name="autoCommitOnClose" value="false" />  
        <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，
                    并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数
                    据源将申明已断开并永久关闭。默认: false-->   
		<property name="breakAfterAcquireFailure" value="true" />


          <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，
                         则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->   
       	<property name="maxStatements" value="${db_maxStatements}" />
          <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->   
          <property name="maxStatementsPerConnection" value="${db_maxStatementsPerConnection}" />  
	</bean>
   
	
	<!-- ====================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描com/hds/api/sqlmap/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
              value="classpath:com/hds/api/sqlmap/*.xml"指的是classpath(类路径)下com.hds.api.mapping包中
                   的所有xml文件UserMapper.xml位于com.hds.api.mapping包下，这样UserMapper.xml就可以被自动扫描       -->
		<property name="mapperLocations" value="classpath:com/hds/api/sqlmap/*.xml"></property>
    </bean>
    
 	<!-- 配置mybatis扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.hds.api.sys.dao这个包以及它的子包下的所有映射接口类,
                其他dao层为ots查询dao,无需扫描上-->
        <property name="basePackage" value="com.hds.api.sys.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
	
	<!-- 配置JNDI -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
          <constructor-arg index="0" ref="sqlSessionFactory" />
     </bean>
	
	
	 <!-- ====================针对事务的配置=================================== -->
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
	<!-- 拦截器方式配置事物 -->
    <!-- 配置当出现Exception、RuntimeException、Exception时采用对应的事务操作 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.RuntimeException" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                rollback-for="java.lang.Exception" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    
	<aop:config> 
        <aop:pointcut id="transactionPointcut" expression="execution(* com.hds.api.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
    

    
    
	
</beans>  