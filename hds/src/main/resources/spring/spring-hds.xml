<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="  
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!--  ================= spring 配置注解信息配置  =================   -->
	
	 <!-- 配置applicationcontext获取方法-->
	<bean id="SpringFactory" class="com.hds.api.common.util.ApplicationContextHelper"/>
	
    <!-- 启用基于注解（Annotation-based）的配置 -->
	<context:annotation-config />
	<!-- 配置主要扫描的类，并注册为bean -->
	<!-- 基本applicationContext需要配置@Repository(Dao)和@Service(Service)注解的类,不用全部加载,以免出现意外 -->
	<!--  方式1：加载多个包-->
	<!--  <context:component-scan base-package="com.hds.api.sevice"/> 
	        <context:component-scan base-package="com.hds.api.dao"/>  -->
	<!--  方式2：加载某个package下包符合正则表达式的类(包含Dao和Service名称的)-->        
	<!--  <context:component-scan base-package="cn.outofmemory.spring" use-default-filters="false">
		         <context:include-filter type="regex" expression="cn\.outofmemory\.spring\.[^.]+(Dao|Service)"/>
	        </context:component-scan> -->
	<!--  方式3：加载某个package下包含特定注解的类-->
	<context:component-scan base-package="com.hds.api" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/> 
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> 
	 </context:component-scan>
	

	 <!--引入整体环境配置文件  	 -->
	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:envionment.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
	 
	<!-- 加载配置文件中的ots相关参数 -->
	<bean id="OTSConfig" class="com.hds.api.sys.vo.OTSConfig">
		<property name="aliyun_accesskey_id" value="${aliyun_accesskey_id}" />
		<property name="aliyun_accesskey_secret" value="${aliyun_accesskey_secret}" />
		<property name="aliyun_ots_endpoint" value="${aliyun_ots_endpoint}" />
		<property name="aliyun_ots_instance" value="${aliyun_ots_instance}" />
	</bean>

	<!-- 初始化数据库参数到内存 bean  -->	 
	<bean id="managerBeanPostProcessor" class="com.hds.api.common.util.ManagerBeanPostProcessor" />
	<bean id="startLoadCacheService" class="com.hds.api.sys.service.LoadCacheService" />	 
		 
</beans>  